package web3;

import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.StaticArray2;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.8.
 */
@SuppressWarnings("rawtypes")
public class Verifier extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50611856806100206000396000f3fe608060405234801561001057600080fd5b5060043610610047577c01000000000000000000000000000000000000000000000000000000006000350463753f2427811461004c575b600080fd5b61005f61005a3660046116a9565b610073565b604051901515815260200160405180910390f35b6040805160138082526102808201909252600091829190602082016102608036833701905050905060005b60138110156100ed578381601381106100b9576100b9611760565b60200201518282815181106100d0576100d0611760565b6020908102919091010152806100e581611792565b91505061009e565b506100f88185610112565b61010657600191505061010c565b60009150505b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018161013e610295565b90508060800151518551600161015491906117ad565b1461015e57600080fd5b604080518082019091526000808252602082018190525b865181101561020c578387828151811061019157610191611760565b6020026020010151106101a357600080fd5b6101f8826101f385608001518460016101bc91906117ad565b815181106101cc576101cc611760565b60200260200101518a85815181106101e6576101e6611760565b6020026020010151610e8e565b610ef2565b91508061020481611792565b915050610175565b5061023581836080015160008151811061022857610228611760565b6020026020010151610ef2565b90506102798560000151866020015161024d84610f4c565b856040015161025f8a60400151610f4c565b6060880151885161026f90610f4c565b8960200151610feb565b610289576001935050505061010c565b50600095945050505050565b61029d611456565b6040805180820182527f08c00c262c8e446d4c2e45c94f240fe22b47993ace1fcf613f1110d28767aadf81527f241e646d0ccf495f02f8a58de36a2372a78388ceedaaf1def960c51c1f666ea96020808301919091529083528151608080820184527f0c1366e015d18980f2ffe33157f734dba0dc3ac2f940d15267e6ba2c50f424a18285019081527f23f3f2f804c40fac618fb89fbd049c63955fcfc78554e17d108aa43d909483f9606080850191909152908352845180860186527f0dc5f006f455d5c6291e712e554ea21b971f1bd70aff3eb5b9c9c3349f62976781527f1ccdf634d5bfb53cefe5f60e834093817232c443650ba55abc878938906f1ffe818601528385015285840192909252835180820185527f1c065f01f0c252f13d5612f272743c4bd7e9113549936a84a01c7ae1b64a37178186019081527f019af626c76197ae284f246a5e112943b302aa36eec6861d571e97df83c6e66e828501528152845180860186527f0bef24ed5e8ac997703f2e0a86675fb06b0f0e8fa165a814e0e1cde26038c47381527ececd345bb11f939f6476e43a460018095b4efa758c7e88a59aa1eb56e6a82e818601528185015285850152835190810184527f151754c522f057893e334ff038efcf2bd2b594cedf93eb09e002c43b174ce1a18185019081527f14dc270580417cc88a64da88d15367e541956a2884273732220619b6a71c436c828401528152835180850185527f27964d7fcb3abb88203b7b38e0c92c51c0750d6462b6f6cb2d03aad07981457181527f134b9830e44ed0dff5e81cc4fe6a434c724f3de7b3c1ff5615abc4bf52702b0c818501528184015290840152815160148082526102a08201909352919082015b604080518082019091526000808252602082015281526020019060019003908161051857505060808201908152604080518082019091527f06cde4a48aa165598500cf3c77b94e57c0ab1617083c3947764ccde04d96561281527f0a8a2e0bbf2e6bec4084414bde50facd1b4220dc5fe3dfed8f8caddbc0d67fa56020820152905180516000906105ab576105ab611760565b602002602001018190525060405180604001604052807f2d6cc4ead7e20a119202b6df0f01a350d73bd9469b9a8cecaca770f59ccd486a81526020017f2e9ad0ede523732c41843bd5c4370f4c073fe156158b34dca6eee9c466aa773d815250816080015160018151811061062257610622611760565b602002602001018190525060405180604001604052807f287b8d7367b4f1d478f5446a3b7f0ab2e41440aa7ef5c89805bc584875cbf95d81526020017f1766b4ab7c1e1e452efa52101d00965a65a994aba8bf3ed4351f99c89ffb9d56815250816080015160028151811061069957610699611760565b602002602001018190525060405180604001604052807f1ee86b7ebbb95e3ec69d41ade8818d9ecf7797b127e5bd67110c1c08af2d9f6281526020017f04d0f30856780a136ff3e09953bc791f04af0240a0b0e424747f4e49c60c265d815250816080015160038151811061071057610710611760565b602002602001018190525060405180604001604052807f19c27025f9b9b9de843c3209185c5dcee7bd9c5ade06fcbd3535581e363f5dc581526020017f2a9cdbf8a331beca531a05f35ef98f24f0f603ef2f3d77c81e258ef2dc3d1dd5815250816080015160048151811061078757610787611760565b602002602001018190525060405180604001604052807f1a52b9cac8fd9b048350e8c71b697dcc05246c72986658c9f6adae7897140c7381526020017f04d50691c5647bfdfa0512c2787da0d146d4b4413437f7aae180bb834cdf009881525081608001516005815181106107fe576107fe611760565b602002602001018190525060405180604001604052807f1aa2f20cb0b31ae39140a9de0d44735a9016382a4a1a41a218c7f4dde3c00aea81526020017f2774a9d86aa5624116a9e171772c65c93ae81e5934bf3004075c6b56629aa781815250816080015160068151811061087557610875611760565b602002602001018190525060405180604001604052807f250b947ac2533405d68329ed981dd313cbaf3313a43b2c8d2682a3fe48f4195781526020017f1e29c790b162dc04b32240171d53324f1f34a6800d2119e3ace01a5534a758dd81525081608001516007815181106108ec576108ec611760565b602002602001018190525060405180604001604052807f27800ea72dca395260a17408ca5416373c0dab07a14a854c1f74e5d92d96d5cf81526020017f2fb17b95f15e3f683effcec13c93be94698e365350e44aaf34f2862070865faf815250816080015160088151811061096357610963611760565b602002602001018190525060405180604001604052807f2b11ad3f90437cc11c52d13aaa6c18f8ae5335c363c8991c9211aee9b33d96b181526020017f0be5a56c7ed781e4e7e9be15eb90d2d6a6f1de984ea6c0d6ff3b11e6c45fba2581525081608001516009815181106109da576109da611760565b602002602001018190525060405180604001604052807f13bbb418be7634c145236f317098ef4d73387820738919c2043420b8450b5c2c81526020017f05cb64846c79afeebc0b88b825d2dc7a1a45ce335084466b8e1d755db27fea008152508160800151600a81518110610a5157610a51611760565b602002602001018190525060405180604001604052807f164c2ad9a57c23e955caf3dc529b37e069ed1ce6886ffafd0a1e6e0cd83754a181526020017f02752ea9681928479f5ed236f1d5f976258d99ebc822b438f5da72e562b94c3a8152508160800151600b81518110610ac857610ac8611760565b602002602001018190525060405180604001604052807f2c00935172522cf72ae8bca06cdd0951b32332c0214f49a8376ada6f5ca4f7cb81526020017f026154b6e5090647c332d2262b736a1fa476e68d3079b0483085f1e790bfd6488152508160800151600c81518110610b3f57610b3f611760565b602002602001018190525060405180604001604052807f278c5f7f7bd17828e6e1392a46edece4e3f0b3e21de82c645df49a3b2e6a5b1781526020017f172542971eb017ce136e0c507c1c1830cae538b68d798010e865fbb5a9e25baa8152508160800151600d81518110610bb657610bb6611760565b602002602001018190525060405180604001604052807f27e8455d5735b28578c8c524e23d299e138d152e3da95138282f62d2538fbd4881526020017f0c38e7b50e179e0f8249317bab4dc9666e8453a2c0f0dbeb7de45274a16492078152508160800151600e81518110610c2d57610c2d611760565b602002602001018190525060405180604001604052807f2bc21697558f2513f6b8f53224e3f7ad3c1e3de5caee1f081897a56489828e2a81526020017f11f194ca71aec65fb2ed2c5f13f0dab230b3cbe44f53ee74a71dfd5cc34394948152508160800151600f81518110610ca457610ca4611760565b602002602001018190525060405180604001604052807f235c81b2a057fbf54a8542e36ca4ac1d8a97c8b4646459f15d826e16bcf0212581526020017f1e576b5025db77bd700e77958db86bc26d8cd081b55431687c0213a2fad079a48152508160800151601081518110610d1b57610d1b611760565b602002602001018190525060405180604001604052807f0417aca7d8c3430919d5071e04ae8b62cd11209759d4cc7b20b36c96a7a2a06581526020017f1235c3984ae21a66304cc5ef4ef213cfe61e48c3ee1095811fcc7d18024e0a388152508160800151601181518110610d9257610d92611760565b602002602001018190525060405180604001604052807f02573e34e7efdfddfb866c2543692b44d2713245be69e10a2c617065f391544c81526020017f27401abe3fa2e3e5b3ff2aeb6f0cf6a310292047b0b159d034e3d3aa92d6404f8152508160800151601281518110610e0957610e09611760565b602002602001018190525060405180604001604052807f241a0e311706ca5a6d2aa45c4b016ea34c013e58792178dbdfb3c8e4cde4f84281526020017f2da93c71ef62f6b0af68f3f2f9ba2533b1ba73d06b8b3b531f8da60eebfb27668152508160800151601381518110610e8057610e80611760565b602002602001018190525090565b6040805180820190915260008082526020820152610eaa6114a7565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808015610edd57610edf565bfe5b5080610eea57600080fd5b505092915050565b6040805180820190915260008082526020820152610f0e6114c5565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808015610edd57610edf565b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790158015610f9357506020830151155b15610fb35750506040805180820190915260008082526020820152919050565b604051806040016040528084600001518152602001828560200151610fd891906117c5565b610fe290846117ea565b90529392505050565b60408051600480825260a08201909252600091829190816020015b604080518082019091526000808252602082015281526020019060019003908161100657505060408051600480825260a0820190925291925060009190602082015b6110506114e3565b8152602001906001900390816110485790505090508a8260008151811061107957611079611760565b6020026020010181905250888260018151811061109857611098611760565b602002602001018190525086826002815181106110b7576110b7611760565b602002602001018190525084826003815181106110d6576110d6611760565b602002602001018190525089816000815181106110f5576110f5611760565b6020026020010181905250878160018151811061111457611114611760565b6020026020010181905250858160028151811061113357611133611760565b6020026020010181905250838160038151811061115257611152611760565b60200260200101819052506111678282611176565b9b9a5050505050505050505050565b6000815183511461118657600080fd5b82516000611195826006611801565b905060008167ffffffffffffffff8111156111b2576111b2611544565b6040519080825280602002602001820160405280156111db578160200160208202803683370190505b50905060005b83811015611416578681815181106111fb576111fb611760565b602002602001015160000151828260066112159190611801565b6112209060006117ad565b8151811061123057611230611760565b60200260200101818152505086818151811061124e5761124e611760565b602002602001015160200151828260066112689190611801565b6112739060016117ad565b8151811061128357611283611760565b6020026020010181815250508581815181106112a1576112a1611760565b602090810291909101810151510151826112bc836006611801565b6112c79060026117ad565b815181106112d7576112d7611760565b6020026020010181815250508581815181106112f5576112f5611760565b602090810291909101015151518261130e836006611801565b6113199060036117ad565b8151811061132957611329611760565b60200260200101818152505085818151811061134757611347611760565b60200260200101516020015160016002811061136557611365611760565b602002015182611376836006611801565b6113819060046117ad565b8151811061139157611391611760565b6020026020010181815250508581815181106113af576113af611760565b6020026020010151602001516000600281106113cd576113cd611760565b6020020151826113de836006611801565b6113e99060056117ad565b815181106113f9576113f9611760565b60209081029190910101528061140e81611792565b9150506111e1565b5061141f611508565b6000602082602086026020860160086107d05a03fa9050808015610edd57508061144857600080fd5b505115159695505050505050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016114806114e3565b815260200161148d6114e3565b815260200161149a6114e3565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806114f6611526565b8152602001611503611526565b905290565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b60e060020a634e487b7102600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561158057611580611544565b60405290565b6040805190810167ffffffffffffffff8111828210171561158057611580611544565b6000604082840312156115bb57600080fd5b6040516040810181811067ffffffffffffffff821117156115de576115de611544565b604052823581526020928301359281019290925250919050565b600060405161026080820182811067ffffffffffffffff8211171561161f5761161f611544565b604052909150819083018481111561163657600080fd5b835b81811015611650578035835260209283019201611638565b50505092915050565b600082601f83011261166a57600080fd5b611672611586565b80604084018581111561168457600080fd5b845b8181101561169e578035845260209384019301611686565b509095945050505050565b6000808284036103608112156116be57600080fd5b610100808212156116ce57600080fd5b6116d661155d565b6116e087876115a9565b81526080603f19840112156116f457600080fd5b6116fc611586565b925061170b8760408801611659565b835261171a8760808801611659565b60208401528260208201526117328760c088016115a9565b6040820152935061011f8501861361174957600080fd5b611755868287016115f8565b925050509250929050565b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052601160045260246000fd5b60006000198214156117a6576117a6611779565b5060010190565b600082198211156117c0576117c0611779565b500190565b6000826117e55760e060020a634e487b7102600052601260045260246000fd5b500690565b6000828210156117fc576117fc611779565b500390565b600081600019048311821515161561181b5761181b611779565b50029056fea2646970667358221220e3d167609e1e2cbca71da5cfc03ea35cb5bc44c76be794e849a05eb467232a2164736f6c63430008090033";

    public static final String FUNC_VERIFYTX = "verifyTx";

    @Deprecated
    protected Verifier(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Verifier(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Verifier(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Verifier(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Boolean> verifyTx(Proof proof, List<BigInteger> input) {
        final Function function = new Function(FUNC_VERIFYTX, 
                Arrays.<Type>asList(proof, 
                new org.web3j.abi.datatypes.generated.StaticArray19<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(input, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static Verifier load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Verifier(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Verifier load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Verifier(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Verifier load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Verifier(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Verifier load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Verifier(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Verifier> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Verifier.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Verifier> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Verifier.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Verifier> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Verifier.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Verifier> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Verifier.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class G1Point extends StaticStruct {
        public BigInteger X;

        public BigInteger Y;

        public G1Point(BigInteger X, BigInteger Y) {
            super(new org.web3j.abi.datatypes.generated.Uint256(X),new org.web3j.abi.datatypes.generated.Uint256(Y));
            this.X = X;
            this.Y = Y;
        }

        public G1Point(Uint256 X, Uint256 Y) {
            super(X,Y);
            this.X = X.getValue();
            this.Y = Y.getValue();
        }
    }

    public static class G2Point extends StaticStruct {
        public List<Uint256> X;

        public List<Uint256> Y;

        public G2Point(List<Uint256> X, List<Uint256> Y) {
            super(new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(X),new org.web3j.abi.datatypes.generated.StaticArray2<org.web3j.abi.datatypes.generated.Uint256>(Y));
            this.X = X;
            this.Y = Y;
        }

        public G2Point(StaticArray2<Uint256> X, StaticArray2<Uint256> Y) {
            super(X,Y);
            this.X = X.getValue();
            this.Y = Y.getValue();
        }
    }

    public static class Proof extends StaticStruct {
        public G1Point a;

        public G2Point b;

        public G1Point c;

        public Proof(G1Point a, G2Point b, G1Point c) {
            super(a,b,c);
            this.a = a;
            this.b = b;
            this.c = c;
        }
    }
}
